var netData;
module.exports = function(RED){
    var collect = require('../nn-extends');
    var net = require('net');

    function curieNeuronsNode(config){
        RED.nodes.createNode(this, config);
        this.name = config.name;
        this.inputKey = config.inputKey;
        this.outputKey = config.outputKey;
        this.inputData = {};
        this.tempInputData = {};
        this.outputData = {};
        this.trainStatus = 0;
        var node = this;

        var host = '127.0.0.1';
        //host ="192.168.0.138";
        var port = 11331;
        var connect_status = false;

        var client = new net.Socket();
        
        client.connect(port, host, function() {

            console.log('CONNECTED TO: ' + host + ':' + port);
            // 建立连接后立即向服务器发送数据，服务器将收到这些数据 

            //client.write("www.runoob.com");
            connect_status = true;


        });
        
        client.on('data', function(data) {

            console.log('DATA: ' + data);
            var msg = {};
            var strdata = data.toString();
            var start = strdata.indexOf('{');
            var end = strdata.indexOf('}');
            strdata = strdata.substring(start,end+1);

            var jsondata = JSON.parse(strdata);
            if (jsondata.hasOwnProperty('cate')){
                
                msg.payload = jsondata.cate;
                node.send(msg);
            }
            if (jsondata.hasOwnProperty('neurons')){
                
                msg.payload = jsondata;
                node.send(msg);
            }

        });

        client.on('close',function(data){
            console.log('Connection closed');
            connect_status = false;
        });

        node.status({fill: 'green',shape: 'dot',text: 'ready'});


        this.on('input', function(msg){
            console.log('=====curieNeurons=======');
                node.status({fill: 'green',shape: 'dot',text: _G_ControlMode});
                console.log(_G_ControlMode);
                var input_key = 'input';
                var output_key = 'output';
                var _input = node.inputKey;
                var _output = node.outputKey;
                (_input == '' || _input.length == 0) ? input_key = input_key : input_key = node.inputKey;
                (_output == '' || _output.length == 0) ? output_key = output_key : output_key = node.outputKey;

                //check data complete.
                if (msg.hasOwnProperty(input_key)){
                    node.inputData = msg[input_key];
                    //console.log('collect-input:');
                    //console.log(node.inputData);
                }

                if (_G_ControlMode == 'train'){
                    // collect input & output
                    if (msg.hasOwnProperty(output_key)){
                        
                        node.outputData = msg[output_key];

                        for (var i in node.outputData) {
                            node.outputData[i] = msg.category;
                        }
                        //console.log('collect-output:');
                        //console.log(node.outputData);
                    }

                    var mode_key = 'save';
                    if (msg.hasOwnProperty(mode_key)){
                        if (msg[mode_key] == true){
                           // node.inputData = {'distance':20,'power':30,'yaw':31};
   
                            var arrIn = Object.keys(node.inputData);
                            var arrOut = Object.keys(node.outputData);
                            if (arrIn.length >0 && arrOut.length > 0){
                                var groupData = {
                                    'input':node.inputData,
                                    'output':node.outputData,
                                };
                                
                                var data = '1';
                                data += ','+arrIn.length;

                                for (var i in node.outputData) {
                                    data += ','+node.outputData[i]; 
                                }

                                for (var i in node.inputData) {
                                    data += ','+node.inputData[i]; 
                                }
                                msg.data = data;
                                //node.send(msg);

                                if (connect_status){
                                    client.write(msg.data);
                                }
                                
                                

                                console.log("data-set:");
                                console.log(groupData);
 
                            }
                        }
                    }

                }

                if (_G_ControlMode == 'run'){
                    collect.clearAllData();

                   // node.inputData = {'distance':20,'power':30,'yaw':31};
   
                    var arrIn = Object.keys(node.inputData);
                    if (arrIn.length >0){
                        var data = '0';
                        data += ','+arrIn.length;

                        for (var i in node.inputData) {
                            data += ','+node.inputData[i]; 
                        }

                        msg.data = data;
                        //node.send(msg);

                        if (connect_status){
                            client.write(msg.data);
                        }
 
                    }

            
                }
                if (_G_ControlMode == 'none'){
                    collect.clearAllData();
                }
        });
    }

    //function socket(){

   // }
    
    RED.nodes.registerType('curieNeurons', curieNeuronsNode);
}